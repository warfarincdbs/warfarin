
from flask import Flask, request, jsonify, abort
import os
import requests

import matplotlib.pyplot as plt
import io
from PIL import Image
import base64

from datetime import datetime
from linebot.v3 import WebhookHandler
from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi,
    TextMessage, ReplyMessageRequest,  ImageMessage 
)
from linebot.v3.webhooks import MessageEvent, TextMessageContent
from linebot.v3.exceptions import InvalidSignatureError
from dotenv import load_dotenv
load_dotenv()

from inr_chart import generate_inr_chart
from flask import send_file  # ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏° import ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
from linebot.v3.messaging import FlexMessage
from linebot.v3.messaging.models import FlexContainer
from linebot.v3.messaging import QuickReply, QuickReplyItem, MessageAction

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import requests

# ====== LINE API Setup ======
channel_secret = os.getenv("LINE_CHANNEL_SECRET")
access_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")

handler = WebhookHandler(channel_secret)
configuration = Configuration(access_token=access_token)
messaging_api = MessagingApi(ApiClient(configuration))

# ====== Flask Setup ======
app = Flask(__name__)

# ====== Google Apps Script Webhook URL ======
GOOGLE_APPS_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbwdi3et7_H6dHFA7dTNRjNESjljUq1KZl2JOitV0fDkeVORlvyJMBgEEEG9nqAdSP4D/exec"

# ====== In-Memory Session ======
user_sessions = {}

# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheet ======
def send_to_google_sheet(user_id, name, birthdate, inr, bleeding="", supplement="", warfarin_dose=""):
    payload = {
        "userId": user_id,
        "name": name,
        "birthdate": birthdate,  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        "inr": inr,
        "bleeding": bleeding,
        "supplement": supplement,
        "warfarin_dose": warfarin_dose
    }
    try:
        response = requests.post(GOOGLE_APPS_SCRIPT_URL, json=payload, timeout=10)
        return response.text
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

# ====== ‡∏´‡∏ô‡πâ‡∏≤ Home ======
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Flask on Render is live"

# ====== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å scheduler) ======
def connect_sheet():
    scope = ['https://spreadsheets.google.com/feeds',
             'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
    client = gspread.authorize(creds)
    return client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)

# ========== ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ==========
def get_today_column():
    thai_days = ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™', '‡∏®‡∏∏‡∏Å‡∏£‡πå', '‡πÄ‡∏™‡∏≤‡∏£‡πå', '‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå']
    today_index = datetime.now().weekday()
    return thai_days[today_index]

# ========== ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ LINE ==========
def send_line_notify(user_id, message):
    url = 'https://api.line.me/v2/bot/message/push'
    headers = {
        'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}',
        'Content-Type': 'application/json'
    }
    payload = {
        'to': user_id,
        'messages': [{
            'type': 'text',
            'text': message
        }]
    }
    response = requests.post(url, headers=headers, json=payload)
    print(f'Sent to {user_id}: {response.status_code}')

# ========== MAIN ==========
def main():
    sheet = connect_sheet()
    data = sheet.get_all_records()
    today_col = get_today_column()

    for row in data:
        user_id = row.get('userID')
        name = f"{row.get('firstName', '')} {row.get('lastName', '')}".strip()
        message_text = row.get(today_col, '').strip()

        if user_id and message_text and message_text != '-':
            message = f"\U0001F4C5 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô{today_col}\n‡∏Ñ‡∏∏‡∏ì {name}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤\n{message_text}"
            send_line_notify(user_id, message)


# ====== API POST ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö REST (Optional) ======
@app.route("/log_inr", methods=["POST"])
def log_inr():
    data = request.get_json()
    userId = data.get("user_id")
    name = data.get("name")
    birthdate = data.get("birthdate", "")  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    inr = data.get("inr")
    bleeding = data.get("bleeding", "")
    supplement = data.get("supplement", "")
    warfarin_dose = data.get("warfarin_dose", "")

    if not (userId and name and inr):
        return jsonify({"error": "Missing required fields"}), 400

    result = send_to_google_sheet(userId, name, birthdate, inr, bleeding, supplement, warfarin_dose)
    return jsonify({"status": "sent", "google_response": result})

# ====== Webhook Endpoint (LINE) ======
@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature")
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"


def get_inr_history_from_sheet(user_id):
    url = "https://script.google.com/macros/s/AKfycbwdi3et7_H6dHFA7dTNRjNESjljUq1KZl2JOitV0fDkeVORlvyJMBgEEEG9nqAdSP4D/exec"
    try:
        response = requests.get(url, params={"userId": user_id, "history": "true"}, timeout=10)
        data = response.json()
        if not data:
            return [], []
        dates = [item["date"] for item in data]
        inrs = [float(item["inr"]) for item in data]
        return dates, inrs
    except Exception as e:
        print(f"Error fetching INR: {e}")
        return [], []

def get_user_profile(user_id):
    try:
        response = requests.get(GOOGLE_APPS_SCRIPT_URL, params={"userId": user_id, "profile": "true"}, timeout=10)
        data = response.json()
        return data  # {firstName, lastName, birthdate} ‡∏´‡∏£‡∏∑‡∏≠ {}
    except Exception as e:
        print("‚ùå Error loading profile:", e)
        return {}


def upload_image_and_reply(user_id, reply_token, image_buf):
    # 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    filename = f"inr_chart_{user_id}.png"
    tmp_path = f"/tmp/{filename}"

    with open(tmp_path, "wb") as f:
        f.write(image_buf.read())

    # 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ LINE ‡∏î‡∏π‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ
    image_url = f"https://warfarin.onrender.com/image/{filename}"  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô domain

    # 3. ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡πà‡∏≤‡∏ô LINE
    messaging_api.reply_message(
        ReplyMessageRequest(
            reply_token=reply_token,
            messages=[
                ImageMessage(
                    original_content_url=image_url,
                    preview_image_url=image_url
                )
            ]
        )
    )


def generate_inr_chart(dates, inr_values):

    dates.reverse()
    inr_values.reverse()

    fig, ax = plt.subplots(figsize=(8, 4))

    # ‡∏ï‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5.5 ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ 5.5
    clipped_values = [min(v, 5.5) for v in inr_values]

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
    ax.plot(dates, clipped_values, marker="o", color="#007bff", label="INR")

    # ‡πÄ‡∏ï‡∏¥‡∏° label ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î
    for i, (x, y, raw_y) in enumerate(zip(dates, clipped_values, inr_values)):
        ax.text(x, y + 0.15, f"{raw_y:.1f}", ha="center", fontsize=10, color="black")
        # ‡∏ñ‡πâ‡∏≤ INR >= 6 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡πÅ‡∏î‡∏á
        if raw_y >= 6:
            ax.plot(x, y, marker="o", color="red", markersize=10)

    # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á INR 2.0‚Äì3.5
    ax.axhspan(2.0, 3.5, facecolor='green', alpha=0.1)

    # ‡∏ï‡∏±‡πâ‡∏á y scale ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0.5 ‡∏ñ‡∏∂‡∏á 5.5
    ax.set_ylim(0.5, 6.2)
    ax.set_yticks([i * 0.5 for i in range(1, 12)])
    ax.set_ylabel("INR")
    ax.set_xticks(range(len(dates)))
    ax.set_xticklabels(dates, rotation=45)
    ax.set_title("INR chart")

    plt.tight_layout()

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô buffer image
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    plt.close(fig)
    buf.seek(0)

    return buf    

@app.route("/image/<filename>")
def serve_image(filename):
    filepath = f"/tmp/{filename}"
    return send_file(filepath, mimetype="image/png")

def send_symptom_assessment_flex(reply_token):
    # Flex 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å
    bubble_bleeding = {
        "type": "bubble",
        "header": {
            "type": "box",
            "layout": "vertical",
            "contents": [{"type": "text", "text": "ü©∏ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", "weight": "bold", "size": "lg"}]
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "md",
            "contents": [
                {"type": "text", "text": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "wrap": True},
                *[
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#FFCDD2",
                        "action": {"type": "message", "label": label, "text": label}
                    }
                    for label in ["‡∏à‡∏∏‡∏î‡∏à‡πâ‡∏≥‡πÄ‡∏•‡∏∑‡∏≠‡∏î","‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÑ‡∏´‡∏•‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î","‡πÑ‡∏≠/‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î","‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞‡∏™‡∏µ‡∏î‡∏≥","‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏ô‡∏¥‡∏°","‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏°‡∏≤‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"]
                ]
            ]
        }
    }

    # Flex 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏∏‡∏î‡∏ï‡∏±‡∏ô
    bubble_clot = {
        "type": "bubble",
        "header": {
            "type": "box",
            "layout": "vertical",
            "contents": [{"type": "text", "text": "üß† ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏∏‡∏î‡∏ï‡∏±‡∏ô", "weight": "bold", "size": "lg"}]
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "md",
            "contents": [
                {"type": "text", "text": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "wrap": True},
                *[
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#BBDEFB",
                        "action": {"type": "message", "label": label, "text": label}
                    }
                    for label in ["‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å", "‡∏õ‡∏ß‡∏î/‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏®‡∏µ‡∏£‡∏©‡∏∞", "‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏≤‡∏ö‡∏ß‡∏°", "‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡∏µ‡∏Å ‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏≤‡∏ä‡∏≤", "‡∏û‡∏π‡∏î‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î","‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"]
                ]
            ]
        }
    }

    messaging_api.reply_message(
        ReplyMessageRequest(
            reply_token=reply_token,
            messages=[
                FlexMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", contents=FlexContainer.from_dict(bubble_bleeding)),
                FlexMessage(alt_text="‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏∏‡∏î‡∏ï‡∏±‡∏ô", contents=FlexContainer.from_dict(bubble_clot))
            ]
        )
    )


# ====== LINE Message Handler ======
@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    user_id = event.source.user_id
    reply_token = event.reply_token
    text = event.message.text.strip()
    session = user_sessions.get(user_id, {})

    bleeding_symptoms = ["‡∏à‡∏∏‡∏î‡∏à‡πâ‡∏≥‡πÄ‡∏•‡∏∑‡∏≠‡∏î","‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÑ‡∏´‡∏•‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î","‡πÑ‡∏≠/‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î","‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞‡∏™‡∏µ‡∏î‡∏≥","‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏ô‡∏¥‡∏°","‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏°‡∏≤‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"]
    clot_symptoms = ["‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å", "‡∏õ‡∏ß‡∏î/‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏®‡∏µ‡∏£‡∏©‡∏∞", "‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏≤‡∏ö‡∏ß‡∏°", "‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡∏µ‡∏Å ‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏≤‡∏ä‡∏≤", "‡∏û‡∏π‡∏î‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î"]

    if text in bleeding_symptoms:
            msg = "‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥\n‚õî ‡πÇ‡∏õ‡∏£‡∏î‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ Warfarin ‡πÅ‡∏•‡∏∞‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"
    elif text in clot_symptoms:
            msg = "‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏∏‡∏î‡∏ï‡∏±‡∏ô\n‚õî ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏ö‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
    elif text == "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£":
            msg = "‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
    else:
            msg = None

    if msg:
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=msg)])
            )
            return

    if text == "‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü INR":
        dates, inrs = get_inr_history_from_sheet(user_id)

        # debug logs
        print("DEBUG: dates =", dates)
        print("DEBUG: inrs =", inrs)

        if not dates or not inrs:
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=reply_token, messages=[
                    TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• INR ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                ])
            )
            return

        buf = generate_inr_chart(dates, inrs)
        upload_image_and_reply(user_id, reply_token, buf)
        return

    if text == "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏â‡∏±‡∏ô‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£":
        thai_days = ["‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò", "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
        today_index = datetime.now().weekday()
        today_th = thai_days[today_index] + " (‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢)"

        try:
            response = requests.get(
                GOOGLE_APPS_SCRIPT_URL,
                params={"userId": user_id, "latest": "true"},
                timeout=10
            )
            data = response.json()

            if today_th in data:
                today_dose = data[today_th]
                if not today_dose or today_dose.strip() in ["", "‡∏á‡∏î‡∏¢‡∏≤", "-"]:
                    msg = f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ{thai_days[today_index]} ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤ Warfarin ‡∏Ñ‡∏£‡∏±‡∏ö"
                else:
                    msg = f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ{thai_days[today_index]}\nüíä ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤ Warfarin ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n{today_dose}"
            else:
                msg = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

        except Exception as e:
            print("‚ùå Error fetching today's dose:", e)
            msg = "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á"

        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=msg)])
        )
        return
# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏ß‡πâ‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô util)

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô flow
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô flow
    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô handler ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (‡∏Å‡πà‡∏≠‡∏ô session flow)
    if text == "‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠":
        user_sessions[user_id] = {"step": "edit_name"}
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text="üìõ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            ])
        )
        return

    if text == "‡πÅ‡∏Å‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î":
        user_sessions[user_id] = {"step": "edit_birthdate"}
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text="üéÇ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô 01/01/2000)")
            ])
        )
        return

    if session.get("step") == "edit_name":
        new_name = text.strip()
        update_user_profile(user_id=user_id, new_name=new_name)
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text=f"‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô \"{new_name}\" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            ])
        )
        user_sessions.pop(user_id, None)
        return

    if session.get("step") == "edit_birthdate":
        new_birthdate = text.strip()
        update_user_profile(user_id=user_id, new_birthdate=new_birthdate)
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text=f"‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô {new_birthdate} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            ])
        )
        user_sessions.pop(user_id, None)
        return

# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î profile ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° Quick Reply
    if text == "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ INR":
        profile = get_user_profile(user_id)
        if profile and profile.get("firstName"):
            full_name = f"{profile['firstName']} {profile.get('lastName', '')}".strip()
            user_sessions[user_id] = {
                "name": full_name,
                "birthdate": profile.get("birthdate", ""),
                "step": "ask_inr"
            }
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=reply_token, messages=[
                    TextMessage(
                        text=f"üôã‚Äç‚ôÇÔ∏è ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏∏‡∏ì {full_name}\nüéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: {profile.get('birthdate', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}",
                        quick_reply=QuickReply(items=[
                            QuickReplyItem(action=MessageAction(label="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠", text="‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠")),
                            QuickReplyItem(action=MessageAction(label="üéÇ ‡πÅ‡∏Å‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î", text="‡πÅ‡∏Å‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î"))
                        ])
                    ),
                    TextMessage(text="üß™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤ INR ‡πÄ‡∏ä‡πà‡∏ô 2.7")
                ])
            )
            return


    if session.get("step") == "ask_name":
        session["name"] = text
        session["step"] = "ask_birthdate"
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text="üéÇ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô 01/01/2000)")
            ])
        )
        return

    if session.get("step") == "ask_birthdate":
        session["birthdate"] = text
        session["step"] = "ask_inr"
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text="üß™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤ INR ‡πÄ‡∏ä‡πà‡∏ô 2.7")
            ])
        )
        return

    if session.get("step") == "ask_inr":
        try:
            inr = float(text)
            session["inr"] = inr
            session["step"] = "ask_bleeding"
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=reply_token, messages=[
                    TextMessage(text="ü©∏ ‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (yes/no)")
                ])
            )
        except ValueError:
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=reply_token, messages=[
                    TextMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå INR ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 2.7")
                ])
            )
        return

    if session.get("step") == "ask_bleeding":
        if text.lower() not in ["yes", "no"]:
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=reply_token, messages=[
                    TextMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå yes ‡∏´‡∏£‡∏∑‡∏≠ no ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
                ])
            )
            return
        session["bleeding"] = text.lower()
        session["step"] = "ask_supplement"
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text="üåø ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÑ‡∏°‡πà‡∏°‡∏µ')")
            ])
        )
        return

    if session.get("step") == "ask_supplement":
        session["supplement"] = text
        session["step"] = "ask_warf_dose"
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text="üíä ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ Warfarin ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏ô 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå,‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£,‡∏û‡∏∏‡∏ò,...,‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå (‡πÄ‡∏ä‡πà‡∏ô 3,3,3,3,3,1.5,0)")
            ])
        )
        return

    if session.get("step") == "ask_warf_dose":
        session["warfarin_dose"] = text
        user_sessions.pop(user_id)

        dose_list = text.split(",")
        if len(dose_list) != 7:
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=reply_token, messages=[
                    TextMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 7 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 3,3,3,3,3,1.5,0")
                ])
            )
            return

        days_th = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
        doses_by_day = [f"üìÖ ‡∏ß‡∏±‡∏ô{day}: {dose.strip()} mg" for day, dose in zip(days_th, dose_list)]
        dose_preview = "\n".join(doses_by_day)

        result = send_to_google_sheet(
            user_id=user_id,
            name=session["name"],
            birthdate=session["birthdate"],
            inr=session["inr"],
            bleeding=session["bleeding"],
            supplement=session["supplement"],
            warfarin_dose=session["warfarin_dose"]
        )
        reply = f"""‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
üë§ {session['name']}
üß™ INR: {session['inr']}
ü©∏ Bleeding: {session['bleeding']}
üåø Supplement: {session['supplement']}

üíä Warfarin (1 week):
{dose_preview}
"""

        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text=reply)
            ])
        )
        return

    if text == "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå":
        send_symptom_assessment_flex(reply_token)
        return
    

    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏î‡πÄ‡∏•‡∏¢
    if user_id not in user_sessions:
        messaging_api.reply_message(
            ReplyMessageRequest(reply_token=reply_token, messages=[
                TextMessage(text="‚ùì ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ INR' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• INR")
            ])
        )
def update_user_profile(user_id, new_name=None, new_birthdate=None):
    payload = {
        "userId": user_id,
        "update_name": new_name,
        "update_dob": new_birthdate
    }
    try:
        response = requests.post(GOOGLE_APPS_SCRIPT_URL, json=payload, timeout=10)
        print("üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:", response.text)
    except Exception as e:
        print("‚ùå ERROR while updating profile:", e)



# ====== Run App ======
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)