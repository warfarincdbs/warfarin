from flask import Flask, request, abort
from linebot.v3 import WebhookHandler
from linebot.v3.messaging import (Configuration, ApiClient, MessagingApi,TextMessage, ReplyMessageRequest)
from linebot.v3.webhooks import MessageEvent, TextMessageContent
from linebot.v3.exceptions import InvalidSignatureError
import os
from datetime import datetime, timedelta
from linebot.v3.messaging import FlexMessage
from linebot.v3.messaging.models import FlexContainer


app = Flask(__name__)

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment Variables
channel_secret = os.getenv("LINE_CHANNEL_SECRET")
access_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")

handler = WebhookHandler(channel_secret)
configuration = Configuration(access_token=access_token)

user_sessions = {}
user_drug_selection = {}
messaging_api = MessagingApi(ApiClient(configuration))

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature")
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

def calculate_warfarin(inr, twd, bleeding, supplement=None):
    if bleeding == "yes":
        return "\U0001f6a8 ‡∏°‡∏µ major bleeding ‚Üí ‡∏´‡∏¢‡∏∏‡∏î Warfarin, ‡πÉ‡∏´‡πâ Vitamin K1 10 mg IV"

    warning = ""
    if supplement:
        herb_map = {
            "‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°": "garlic", "‡πÉ‡∏ö‡πÅ‡∏õ‡∏∞‡∏Å‡πä‡∏ß‡∏¢": "ginkgo", "‡πÇ‡∏™‡∏°": "ginseng",
            "‡∏Ç‡∏°‡∏¥‡πâ‡∏ô": "turmeric", "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏õ‡∏•‡∏≤": "fish oil", "dong quai": "dong quai", "cranberry": "cranberry",
            "‡∏ï‡∏±‡∏á‡∏Å‡∏∏‡∏¢": "dong quai", "‡πÇ‡∏Å‡∏à‡∏¥": "goji berry", "‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏°‡πÑ‡∏°‡∏•‡πå": "chamomile", "‡∏Ç‡∏¥‡∏á": "ginger", "‡∏ä‡∏∞‡πÄ‡∏≠‡∏°‡πÄ‡∏ó‡∏®": "licorice",
            "‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß": "green tea", "‡∏ô‡∏°‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á": "soy milk", "‡∏Ñ‡∏•‡∏≠‡πÇ‡∏£‡∏ü‡∏¥‡∏•‡∏•‡πå": "chlorophyll",
            "‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡πÄ‡∏Ñ": "vitamin K", "‡πÇ‡∏Ñ‡πÄ‡∏≠‡∏ô‡πÑ‡∏ã‡∏°‡πå Q10": "Coenzyme Q10", "St.John‚Äôs Wort": "St.John‚Äôs Wort"
        }
        high_risk = list(herb_map.keys())
        matched = [name for name in high_risk if name in supplement]
        if matched:
            herbs = ", ".join(matched)
            warning = f"\n\u26a0\ufe0f ‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠ INR ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà: {herbs}\n‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á INR ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î"
        else:
            warning = "\n\u26a0\ufe0f ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£ ‚Üí ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á INR"

    followup_text = get_followup_text(inr)

    if inr < 1.5:
        result = f"\U0001f539 INR < 1.5 ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 10‚Äì20%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 1.1:.1f} ‚Äì {twd * 1.2:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 1.5 <= inr <= 1.9:
        result = f"\U0001f539 INR 1.5‚Äì1.9 ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 5‚Äì10%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 1.05:.1f} ‚Äì {twd * 1.10:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 2.0 <= inr <= 3.0:
        result = "‚úÖ INR 2.0‚Äì3.0 ‚Üí ‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÄ‡∏î‡∏¥‡∏°"
    elif 3.1 <= inr <= 3.9:
        result = f"\U0001f539 INR 3.1‚Äì3.9 ‚Üí ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 5‚Äì10%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 0.9:.1f} ‚Äì {twd * 0.95:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 4.0 <= inr <= 4.9:
        result = f"‚ö†\ufe0f INR 4.0‚Äì4.9 ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ 1 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 10%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 0.9:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 5.0 <= inr <= 8.9:
        result = "‚ö†\ufe0f INR 5.0‚Äì8.9 ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ 1‚Äì2 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏´‡πâ Vitamin K1 1 mg"
    else:
        result = "\U0001f6a8 INR ‚â• 9.0 ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏´‡πâ Vitamin K1 5‚Äì10 mg"

    return f"{result}{warning}\n\n{followup_text}"

def get_inr_followup(inr):
    if inr < 1.5: return 7
    elif inr <= 1.9: return 14
    elif inr <= 3.0: return 56
    elif inr <= 3.9: return 14
    elif inr <= 6.0: return 7
    elif inr <= 8.9: return 5
    elif inr > 9.0: return 2
    return None

def get_followup_text(inr):
    days = get_inr_followup(inr)
    if days:
        date = (datetime.now() + timedelta(days=days)).strftime("%-d %B %Y")
        return f"üìÖ  ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à INR ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô {days} ‡∏ß‡∏±‡∏ô\nüìå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à: {date}"
    else:
        return ""



def send_supplement_flex(reply_token):
    flex_content = {
        "type": "bubble",
        "size": "mega",
        "header": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {"type": "text", "text": "üåø ‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°", "weight": "bold", "size": "lg"}
            ]
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "md",
            "contents": [
                {"type": "text", "text": "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?", "wrap": True, "size": "md"},
                {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        {"type": "button", "style": "primary", "height": "sm", "color": "#84C1FF",
                         "action": {"type": "message", "label": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ", "text": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ"}},
                        *[
                            {"type": "button", "style": "primary", "height": "sm", "color": "#AEC6CF",
                             "action": {"type": "message", "label": herb, "text": herb}}
                            for herb in ["‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "‡πÉ‡∏ö‡πÅ‡∏õ‡∏∞‡∏Å‡πä‡∏ß‡∏¢", "‡πÇ‡∏™‡∏°", "‡∏Ç‡∏°‡∏¥‡πâ‡∏ô", "‡∏Ç‡∏¥‡∏á", "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏õ‡∏•‡∏≤", "‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î", "‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
                        ]
                    ]
                }
            ]
        },
        "styles": {
            "header": {"backgroundColor": "#D0E6FF"},
            "body": {"backgroundColor": "#FFFFFF"}
        }
    }

    flex_container = FlexContainer.from_dict(flex_content)

    messaging_api.reply_message(
        ReplyMessageRequest(
            reply_token=reply_token,
            messages=[FlexMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°", contents=flex_container)]
        )
    )
def send_interaction_flex(reply_token):
    interaction_drugs = [
        "Amiodarone", "Gemfibrozil", "Azole antifungal", "Trimethoprim/Sulfamethoxazole",
        "Macrolides(ex.Erythromycin)", "NSAIDs", "Quinolones(ex.Ciprofloxacin)"
    ]
    flex_content = {
        "type": "bubble",
        "size": "mega",
        "header": {
            "type": "box",
            "layout": "vertical",
            "contents": [{"type": "text", "text": "üíä ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Å‡∏±‡∏ö Warfarin", "weight": "bold", "size": "lg"}]
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "md",
            "contents": [
                {"type": "text", "text": "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?", "wrap": True, "size": "md"},
                {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        {"type": "button", "style": "primary", "height": "sm", "color": "#84C1FF",
                         "action": {"type": "message", "label": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ", "text": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ"}}
                    ] + [
                        {"type": "button", "style": "primary", "height": "sm", "color": "#FFD700",
                         "action": {"type": "message", "label": drug, "text": drug}}
                        for drug in interaction_drugs
                    ] + [
                        {"type": "button", "style": "primary", "height": "sm", "color": "#FFB6C1",
                         "action": {"type": "message", "label": "‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î", "text": "‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î"}},
                        {"type": "button", "style": "primary", "height": "sm", "color": "#D8BFD8",
                         "action": {"type": "message", "label": "‡∏¢‡∏≤‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "text": "‡∏¢‡∏≤‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ"}}
                    ]
                }
            ]
        },
        "styles": {
            "header": {"backgroundColor": "#F9E79F"},
            "body": {"backgroundColor": "#FFFFFF"}
        }
    }
    flex_container = FlexContainer.from_dict(flex_content)
    messaging_api.reply_message(
        ReplyMessageRequest(
            reply_token=reply_token,
            messages=[FlexMessage(alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤", contents=flex_container)]
        )
    )


@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    reply_token = event.reply_token
    user_text = event.message.text
    user_id = event.source.user_id
    text = user_text.strip()
    text_lower = text.lower()

    if text_lower in ['‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤ warfarin']:
        user_sessions.pop(user_id, None)
        user_drug_selection.pop(user_id, None)
        user_sessions[user_id] = {"flow": "warfarin", "step": "ask_inr"}
        messaging_api.reply_message(
            ReplyMessageRequest(
                reply_token=reply_token,
                messages=[TextMessage(text="üß™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ INR (‡πÄ‡∏ä‡πà‡∏ô 2.5)")]
            )
        )
        return

    if user_id in user_sessions:
        session = user_sessions[user_id]
        if session.get("flow") == "warfarin":
            step = session.get("step")
            if step == "ask_inr":
                try:
                    session["inr"] = float(text)
                    session["step"] = "ask_twd"
                    reply = "üìà ‡πÉ‡∏™‡πà Total Weekly Dose (TWD) ‡πÄ‡∏ä‡πà‡∏ô 28"
                except:
                    reply = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ INR ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 2.5"
                messaging_api.reply_message(
                    ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=reply)])
                )
                return

            elif step == "ask_twd":
                try:
                    session["twd"] = float(text)
                    session["step"] = "ask_bleeding"
                    reply = "ü©∏ ‡∏°‡∏µ major bleeding ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (yes/no)"
                except:
                    reply = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ TWD ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 28"
                messaging_api.reply_message(
                    ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=reply)])
                )
                return

            elif step == "ask_bleeding":
                if text.lower().strip(".") not in ["yes", "no"]:
                    reply = "‚ùå ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ yes ‡∏´‡∏£‡∏∑‡∏≠ no ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                    messaging_api.reply_message(
                        ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=reply)])
                    )
                    return
                session["bleeding"] = text.lower()
                if text.lower().strip(".") == "yes":
                # ‚úÖ ‡∏°‡∏µ bleeding ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏•‡∏∞‡∏à‡∏ö flow
                    result = calculate_warfarin(session["inr"], session["twd"], session["bleeding"])
                    user_sessions.pop(user_id, None)
                    messaging_api.reply_message(
                        ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=result)])
                )
                
                else:   
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ bleeding ‚Üí ‡πÑ‡∏õ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏ï‡πà‡∏≠
                    session["step"] = "choose_supplement"
                    send_supplement_flex(reply_token)
                return


            elif step == "choose_supplement":
                if text == "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ":
                    session["supplement"] = ""
                    session["step"] = "choose_interaction"
                    send_interaction_flex(reply_token)
                    return

                elif text == "‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ":
                    session["step"] = "ask_custom_supplement"
                    messaging_api.reply_message(
                        ReplyMessageRequest(
                            reply_token=reply_token,
                            messages=[TextMessage(text="üåø ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏±‡∏á‡∏Å‡∏∏‡∏¢ ‡∏Ç‡∏¥‡∏á ‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß")]
                        )
                    )
                    return
                
                elif step == "ask_custom_supplement":
                    session["supplement"] = text
                    session["step"] = "choose_interaction"
                    send_interaction_flex(reply_token)
                    return

                else:
                    session["supplement"] = text
                    session["step"] = "choose_interaction"
                    send_interaction_flex(reply_token)
                    return

            elif step == "choose_interaction":
                if text == "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ":
                    interaction_note = ""
                    supplement = session.get("supplement", "")
                    result = calculate_warfarin(session["inr"], session["twd"], session["bleeding"], supplement)
                    final_result = f"{result.split('\n\n')[0]}{interaction_note}\n\n{result.split('\n\n')[1]}"
                    user_sessions.pop(user_id, None)
                    messaging_api.reply_message(
                        ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=final_result)])
                    )
                    return

                elif text in ["‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î", "‡∏¢‡∏≤‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]:
                    session["step"] = "ask_interaction"
                    reply = "üíä ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô Amiodarone, NSAIDs"
                    messaging_api.reply_message(
                        ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=reply)])
                    )
                    return

                else:
                    interaction_note = f"\n‚ö†Ô∏è ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤: {text} ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Å‡∏±‡∏ö Warfarin"
                    supplement = session.get("supplement", "")
                    result = calculate_warfarin(session["inr"], session["twd"], session["bleeding"], supplement)
                    final_result = f"{result.split('\n\n')[0]}{interaction_note}\n\n{result.split('\n\n')[1]}"
                    user_sessions.pop(user_id, None)
                    messaging_api.reply_message(
                        ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=final_result)])
                    )
                    return

            elif step == "ask_interaction":
                interaction_note = f"\n‚ö†Ô∏è ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤: {text.strip()} ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Å‡∏±‡∏ö Warfarin"
                supplement = session.get("supplement", "")
                result = calculate_warfarin(session["inr"], session["twd"], session["bleeding"], supplement)
                final_result = f"{result.split('\n\n')[0]}{interaction_note}\n\n{result.split('\n\n')[1]}"
                user_sessions.pop(user_id, None)
                messaging_api.reply_message(
                    ReplyMessageRequest(reply_token=reply_token, messages=[TextMessage(text=final_result)])
                )
                return


    if user_id not in user_sessions and user_id not in user_drug_selection:
        messaging_api.reply_message(
            ReplyMessageRequest(
                reply_token=reply_token,
                messages=[TextMessage(text="‚ùì ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤ warfarin' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤‡πÄ‡∏î‡πá‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")]
            )
        )
        return

@app.route("/")
def home():
    return "‚úÖ LINE Bot is ready to receive Webhook"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port) 